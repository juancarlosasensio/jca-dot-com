---
title: 'CSS Compositions'
toc:
  - text: 'Configuration'
    slug: '#configuration'
  - text: 'Gutters and Spacing'
    slug: '#gutters-and-spacing'
  - text: 'Justification and alignment'
    slug: '#justification-and-alignment'
  - text: 'Flow'
    slug: '#flow'
  - text: 'Grid'
    slug: '#grid'
  - text: 'Cluster'
    slug: '#cluster'
  - text: 'Repel'
    slug: '#repel'
  - text: 'Sidebar'
    slug: '#sidebar'
  - text: 'Switcher'
    slug: '#switcher'
  - text: 'Wrapper'
    slug: '#wrapper'
---

{% extends "layouts/pattern-library.njk" %}

<!-- prettier-ignore -->
{% block inner %}
  <p>These are flexible, compositional layouts that follow the <a href="https://cube.fyi/composition.html">CUBE CSS composition principles</a>.</p>

  <h2 id="configuration">Configuration</h2>
  <p>If you want to change the value of a custom property, you can either set a value
in your context, or target the composition itself (E.G <code>.sidebar</code>) for extra specificity.</p>
  <p>The default values are fallbacks for custom properties, so are easily overridden.</p>

  <h2 id="gutters-and-spacing">Gutters and Spacing</h2>
  <p>All compositions use a consistent
<code>--gutter</code> Custom Property to manage spacing between items. You
can either set a value for this in context, just like in the configuration
section above, or you can use the <code>gutter</code> utility classes.</p>

  <p>For example, you could increase the gutter on the sidebar like this:
<code>&lt;div class=&quot;sidebar gutter-xl&quot;&gt;</code>. </p>

  <h2 id="justification-and-alignment">Justification and alignment</h2>

  <p>Each composition has a vertical and horizontal alignment Custom Property
<strong>if applicable</strong>, but you can also use the <code>items</code>
and <code>justify</code>
    <a
href="https://tailwindcss.com/docs/justify-content">Tailwind utility
classes</a> like this: <code>&lt;div class=&quot;repel
items-center&quot;&gt;</code>.</p>

  <hr/>

  <h2 id="flow">Flow</h2>

  <p>The flow utility provides flow and rhythm between direct sibling elements. Where <code>--flow-space</code> is not defined: the default value is 1em, which equals the font size of the affected element.</p>

  <p>
    <a href="https://piccalil.li/blog/my-favourite-3-lines-of-css/">More info</a>
  </p>
  <h3>Configuration</h3>
  <table>
    <thead>
      <tr>
        <th>Property</th>
        <th>Default value</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>
          <code>--flow-space</code>
        </td>
        <td>
          <code>1em</code>
        </td>
        <td>This defines the space between each item.</td>
      </tr>
    </tbody>
  </table>

  <h3>Example</h3>
  <article class="flow">
    <p class="bg-dark p-m">
    Nullam id dolor id nibh ultricies vehicula ut id elit. Nulla vitae elit
    libero, a pharetra augue.
  </p>
    <p class="bg-dark p-m">
    Nulla vitae elit libero, a pharetra augue. Cras justo odio, dapibus ac
    facilisis in, egestas eget quam.
  </p>
    <p class="bg-dark p-m" style="--flow-space: 3em">
      <code>--flow-space</code> set with an inline style to <code>3em</code>: <code>style="--flow-space: 3em"</code>
    </p>
  </article>

  <p>You can also use the <code>flow-space</code> generated utility that allows you to use the <a href="/pattern-library/spacing">spacing design tokens</a>. For example, If you want that last paragraph</p>

  <p>to have <code>M</code> spacing, from the <a href="/pattern-library/spacing">spacing scale</a>, you would change the code to the following:</p>

  <h3>Example</h3>

  <article class="flow">
    <p class="bg-dark p-m">
    Nullam id dolor id nibh ultricies vehicula ut id elit. Nulla vitae elit
    libero, a pharetra augue.
  </p>
    <p class="bg-dark p-m">
    Nulla vitae elit libero, a pharetra augue. Cras justo odio, dapibus ac
    facilisis in, egestas eget quam.
  </p>
    <p class="flow-space-xl bg-dark p-m">
      <code>--flow-space</code> is set to use XL on the <a href="/pattern-library/spacing">spacing scale</a>, using the <code>flow-space-xl</code> utility class.
  </p>
  </article>
  <h2 id="grid">Grid</h2>
  <p>
    <code>.grid</code>
  </p>

  <p>A flexible layout that will create an auto-fill grid with
configurable grid item sizes.</p>

  <h3>Configuration</h3>
  <table>
    <thead>
      <tr>
        <th>Property</th>
        <th>Default value</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>
          <code>--gutter</code>
        </td>
        <td>
          <code>var(--space-m)</code>
        </td>
        <td>This defines the space between each item.</td>
      </tr>
      <tr>
        <td>
          <code>--grid-min-item-size</code>
        </td>
        <td>
          <code>20rem</code>
        </td>
        <td>How large each item should be, as a minimum</td>
      </tr>
      <tr>
        <td>
          <code>--grid-placement</code>
        </td>
        <td>
          <code>auto-fill</code>
        </td>
        <td>Set either auto-fit or auto-fill to change how empty grid tracks are handled</td>
      </tr>
    </tbody>
  </table>

  <h3>Examples</h3>

  <div class="grid">
    <div class="bg-dark p-m">Item 1</div>
    <div class="bg-dark p-m">Item 2</div>
    <div class="bg-dark p-m">Item 3</div>
    <div class="bg-dark p-m">Item 4</div>
    <div class="bg-dark p-m">Item 5</div>
    <div class="bg-dark p-m">Item 6</div>
    <div class="bg-dark p-m">Item 7</div>
    <div class="bg-dark p-m">Item 8</div>
  </div>

  <h2 id="cluster">Cluster</h2>
  <p>
    <code>.cluster</code>
  </p>

  <p>A layout that lets you to distribute items with consitent spacing, regardless of their size.</p>

  <h3>Configuration</h3>
  <table>
    <thead>
      <tr>
        <th>Property</th>
        <th>Default value</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>
          <code>--gutter</code>
        </td>
        <td>
          <code>var(--space-m)</code>
        </td>
        <td>This defines the space between each item.</td>
      </tr>
      <tr>
        <td>
          <code>--cluster-horizontal-alignment</code>
        </td>
        <td>
          <code>flex-start</code>
        </td>
        <td>How items should align horizontally. Can be any acceptable <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Aligning_Items_in_a_Flex_Container">flexbox alignment value.</a>.</td>
      </tr>
      <tr>
        <td>
          <code>--cluster-vertical-alignment</code>
        </td>
        <td>
          <code>center</code>
        </td>
        <td>How items should align vertically. Can be any acceptable <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Aligning_Items_in_a_Flex_Container">flexbox alignment value.</a>.</td>
      </tr>
    </tbody>
  </table>

  <h3>Examples</h3>

  <div class="cluster">
    <div class="bg-dark p-m">Item 1</div>
    <div class="bg-dark p-m">Item 2</div>
    <div class="bg-dark p-m">Item 3</div>
    <div class="bg-dark p-m">Item 4</div>
    <div class="bg-dark p-m">Item 5</div>
    <div class="bg-dark p-m">Item 6</div>
    <div class="bg-dark p-m">Item 7</div>
    <div class="bg-dark p-m">Item 8</div>
  </div>

  <h2 id="repel">Repel</h2>
  <p>A little layout that pushes items away from each other where
there is space in the viewport and stacks on small viewports.</p>
  <p>
    <code>.repel</code>
  </p>

  <table>
    <thead>
      <tr>
        <th>Property</th>
        <th>Default value</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>
          <code>--gutter</code>
        </td>
        <td>
          <code>var(--space-m)</code>
        </td>
        <td>This defines the space between items.</td>
      </tr>
      <tr>
        <td>
          <code>--repel-vertical-alignment</code>
        </td>
        <td>
          <code>20rem</code>
        </td>
        <td>How items should align vertically. Can be any acceptable <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Aligning_Items_in_a_Flex_Container">flexbox alignment value.</a>.</td>
      </tr>
    </tbody>
  </table>

  <h3>Examples</h3>
  <div class="repel">
    <div class="bg-dark p-m">Item 1 repels item 2</div>
    <div class="bg-dark p-m">Item 2 repels item 1</div>
  </div>

  <h2 id="sidebar">Sidebar</h2>
  <p>
    <code>.sidebar</code>
  </p>

  <p>A layout that allows you to have a flexible main content area
and a &quot;fixed&quot; width sidebar that sits on the left or right.
If there is not enough viewport space to fit both the sidebar
width <em>and</em> the main content minimum width, they will stack
on top of each other</p>

  <h3>Configuration</h3>
  <table>
    <thead>
      <tr>
        <th>Property</th>
        <th>Default value</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>
          <code>--gutter</code>
        </td>
        <td>
          <code>var(--space-m)</code>
        </td>
        <td>This defines the space between the sidebar and main content.</td>
      </tr>
      <tr>
        <td>
          <code>--sidebar-target-width</code>
        </td>
        <td>
          <code>20rem</code>
        </td>
        <td>How large the sidebar should be</td>
      </tr>
      <tr>
        <td>
          <code>--sidebar-content-min-width</code>
        </td>
        <td>
          <code>50%</code>
        </td>
        <td>The minimum size of the main content area</td>
      </tr>
    </tbody>
  </table>

  <h3>Exceptions</h3>

  <table>
    <thead>
      <tr>
        <th>Exception</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>
          <code>.sidebar[data-direction='rtl']</code>
        </td>
        <td>Flips the sidebar to be on the right.</td>
      </tr>
      <tr>
        <td>
          <code>.sidebar[data-reversed]</code>
        </td>
        <td>Switches the flex direction so you can maintain content ordering while visually appearing flipped.</td>
      </tr>
    </tbody>
  </table>

  <h3>Examples</h3>

  <p>A standard sidebar.</p>

  <div class="sidebar">
    <div class="bg-dark p-m">I am the sidebar</div>
    <div class="flow bg-dark p-m">
      <h4>I am the content</h4>
      <p>Etiam porta sem malesuada magna mollis euismod. Cras mattis consectetur purus sit amet fermentum.</p>
      <p>Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Vestibulum id ligula porta felis euismod semper.</p>
    </div>
  </div>

  <h2 id="switcher">Switcher</h2>
  <p>
    <code>.switcher</code>
  </p>

  <p>A layout that allows you to lay <strong>2</strong> items next to each other until there is not enough horizontal space to allow that.</p>

  <h3>Configuration</h3>
  <table>
    <thead>
      <tr>
        <th>Property</th>
        <th>Default value</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>
          <code>--gutter</code>
        </td>
        <td>
          <code>var(--space-m)</code>
        </td>
        <td>This defines the space between each item</td>
      </tr>
      <tr>
        <td>
          <code>--switcher-vertical-alignment</code>
        </td>
        <td>
          <code>flex-start</code>
        </td>
        <td>How items should align vertically. Can be any acceptable <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Aligning_Items_in_a_Flex_Container">flexbox alignment value.</a>
        </td>
      </tr>
      <tr>
        <td>
          <code>--switcher-target-container-width</code>
        </td>
        <td>
          <code>30rem</code>
        </td>
        <td>How large the container needs to be to allow items to sit inline with each other</td>
      </tr>
    </tbody>
  </table>

  <h3>Examples</h3>

  <div class="switcher">
    <div class="bg-dark p-m">Item 1</div>
    <div class="bg-dark p-m">Item 2</div>
  </div>

  <h2 id="wrapper">Wrapper</h2>

  <p>A horizontally centered wrapper that provides a consistent central column.</p>

  <p>This should be used in all contexts where the content needs to be in the center of the page.</p>

  <pre><code class="html">&lt;div class=&quot;wrapper&quot;&gt;I am centered and have a nice, consistent gutter.&lt;/div&gt;
</code></pre>

  <h3>Examples</h3>

  <div class="wrapper bg-dark p-m">I am centered and have a nice, consistent gutter.</div>

{% endblock %}